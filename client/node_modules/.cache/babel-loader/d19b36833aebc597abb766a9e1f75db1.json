{"ast":null,"code":"import * as api from \"../API/index\";\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    console.log(data);\n    dispatch({\n      type: \"FETCH_ALL\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //this mean we are importing from actions- as api and be able to use the fetchPosts from the axios file//\n//Action Creators, function returning actions, payload= stored data//\n// when working with async fx, we can use R.thunk, allowing us to specify an additional arrow fx which we will use async\n//now we have access to dispatch w/async//\n//catching all the data from API, data reps the post\n\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: \"CREATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: \"UPDATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"error\");\n  }\n}; // export const deletePost = async (req, res) => {\n//   const { id } = req.params;\n//   if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);\n//   await PostMessage.findByIdAndRemove(id);\n//   res.json({ message: \"Post deleted successfully.\" });\n// }\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: \"DELETE, payload: data\"\n    });\n  } catch (error) {}\n};\nexport const likePost = async (req, res) => {\n  const {\n    id\n  } = req.params;\n  if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);\n  const post = await PostMessage.findById(id);\n  const updatedPost = await PostMessage.findByIdAndUpdate(id, {\n    likeCount: post.likeCount + 1\n  }, {\n    new: true\n  });\n  res.json(updatedPost);\n};","map":{"version":3,"sources":["/Users/sylvia/Documents/Blog/client/src/actions/post.js"],"names":["api","getPosts","dispatch","data","fetchPosts","console","log","type","payload","error","message","createPost","post","updatePost","id","deletePost","likePost","req","res","params","mongoose","Types","ObjectId","isValid","status","send","PostMessage","findById","updatedPost","findByIdAndUpdate","likeCount","new","json"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,cAArB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACI,UAAJ,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAD,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEL;AAA9B,KAAD,CAAR;AACD,GALD,CAKE,OAAOM,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,OAAlB;AACD;AACF,CATM,C,CAYP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOV,QAAP,IAAoB;AACtD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACW,UAAJ,CAAeC,IAAf,CAAvB;AAEAV,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEL;AAA3B,KAAD,CAAR;AACD,GAJD,CAIE,OAAOM,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,OAAlB;AACD;AACF,CARM;AAUP,OAAO,MAAMG,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOV,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACa,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AAEAV,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEL;AAA3B,KAAD,CAAR;AACD,GAJD,CAIE,OAAOM,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,CARM,C,CAUP;AACA;AAEA;AAEA;AAEA;AACA;;AAGA,OAAO,MAAMS,UAAU,GAAID,EAAD,IAAQ,MAAOZ,QAAP,IAAoB;AACpD,MAAG;AACD,UAAMF,GAAG,CAACe,UAAJ,CAAeD,EAAf,CAAN;AAEAZ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACD,GAJD,CAKA,OAAME,KAAN,EAAY,CAEX;AAEA,CAVI;AAYP,OAAO,MAAMO,QAAQ,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,QAAM;AAAEJ,IAAAA;AAAF,MAASG,GAAG,CAACE,MAAnB;AAEA,MAAI,CAACC,QAAQ,CAACC,KAAT,CAAeC,QAAf,CAAwBC,OAAxB,CAAgCT,EAAhC,CAAL,EAA0C,OAAOI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,oBAAmBX,EAAG,EAA5C,CAAP;AAE1C,QAAMF,IAAI,GAAG,MAAMc,WAAW,CAACC,QAAZ,CAAqBb,EAArB,CAAnB;AAEA,QAAMc,WAAW,GAAG,MAAMF,WAAW,CAACG,iBAAZ,CAA8Bf,EAA9B,EAAkC;AAAEgB,IAAAA,SAAS,EAAElB,IAAI,CAACkB,SAAL,GAAiB;AAA9B,GAAlC,EAAqE;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAArE,CAA1B;AAEAb,EAAAA,GAAG,CAACc,IAAJ,CAASJ,WAAT;AACD,CAVM","sourcesContent":["import * as api from \"../API/index\";\n\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const { data } = await api.fetchPosts();\n    console.log(data);\n\n    dispatch({ type: \"FETCH_ALL\", payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n\n//this mean we are importing from actions- as api and be able to use the fetchPosts from the axios file//\n//Action Creators, function returning actions, payload= stored data//\n// when working with async fx, we can use R.thunk, allowing us to specify an additional arrow fx which we will use async\n//now we have access to dispatch w/async//\n//catching all the data from API, data reps the post\n\nexport const createPost = (post) => async (dispatch) => {\n  try {\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: \"CREATE\", payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: \"UPDATE\", payload: data });\n  } catch (error) {\n    console.log(\"error\");\n  }\n};\n\n// export const deletePost = async (req, res) => {\n//   const { id } = req.params;\n\n//   if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);\n\n//   await PostMessage.findByIdAndRemove(id);\n\n//   res.json({ message: \"Post deleted successfully.\" });\n// }\n\n\nexport const deletePost = (id) => async (dispatch) => {\n  try{\n    await api.deletePost(id);\n\n    dispatch({type:\"DELETE, payload: data\"})\n  }\n  catch(error){\n\n  }\n\n  }\n\nexport const likePost = async (req, res) => {\n  const { id } = req.params;\n\n  if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);\n  \n  const post = await PostMessage.findById(id);\n\n  const updatedPost = await PostMessage.findByIdAndUpdate(id, { likeCount: post.likeCount + 1 }, { new: true });\n  \n  res.json(updatedPost);\n}\n"]},"metadata":{},"sourceType":"module"}