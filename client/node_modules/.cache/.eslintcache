[{"/Users/sylvia/Documents/Blog/client/src/index.js":"1","/Users/sylvia/Documents/Blog/client/src/App.js":"2","/Users/sylvia/Documents/Blog/client/src/components/Hero/hero.js":"3","/Users/sylvia/Documents/Blog/client/src/components/ScrollToTop.js":"4","/Users/sylvia/Documents/Blog/client/src/components/Posts/posts.js":"5","/Users/sylvia/Documents/Blog/client/src/components/Post/post.js":"6","/Users/sylvia/Documents/Blog/client/src/components/Form/form.js":"7","/Users/sylvia/Documents/Blog/client/src/actions/post.js":"8","/Users/sylvia/Documents/Blog/client/src/reducers/index.js":"9","/Users/sylvia/Documents/Blog/client/src/reducers/posts.js":"10","/Users/sylvia/Documents/Blog/client/src/API/index.js":"11","/Users/sylvia/Documents/Blog/client/src/api/index.js":"12"},{"size":508,"mtime":1642965158301,"results":"13","hashOfConfig":"14"},{"size":951,"mtime":1643184295572,"results":"15","hashOfConfig":"14"},{"size":1877,"mtime":1643093485891,"results":"16","hashOfConfig":"14"},{"size":245,"mtime":1642735698598,"results":"17","hashOfConfig":"14"},{"size":890,"mtime":1643186874375,"results":"18","hashOfConfig":"14"},{"size":2173,"mtime":1643250469736,"results":"19","hashOfConfig":"14"},{"size":4662,"mtime":1643242473177,"results":"20","hashOfConfig":"14"},{"size":2004,"mtime":1643250866190,"results":"21","hashOfConfig":"14"},{"size":114,"mtime":1642920524287,"results":"22","hashOfConfig":"14"},{"size":562,"mtime":1643250880422,"results":"23","hashOfConfig":"14"},{"size":407,"mtime":1643229894758,"results":"24","hashOfConfig":"14"},{"size":416,"mtime":1643073996098,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4z0ace",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sylvia/Documents/Blog/client/src/index.js",[],["56","57"],"/Users/sylvia/Documents/Blog/client/src/App.js",[],"/Users/sylvia/Documents/Blog/client/src/components/Hero/hero.js",[],"/Users/sylvia/Documents/Blog/client/src/components/ScrollToTop.js",[],["58","59"],"/Users/sylvia/Documents/Blog/client/src/components/Posts/posts.js",[],"/Users/sylvia/Documents/Blog/client/src/components/Post/post.js",["60"],"import React from \"react\";\nimport {\n  CardActions,\n  CardContent,\n  CardMedia,\n  Button,\n} from \"@material-ui/core/\";\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\n// import { likePost, deletePost } from \"../../../actions/posts\";\n\nconst Card = styled.div`\n  background-color: #08080a73;\n  height: 400px;\n  width: 300px;\n  border-radius: 25px;\n  padding: 10px 15px;\n`;\n\nconst Typography = styled.p`\n  color: white;\n`;\n\nconst Post = ({ post, setCurrentId }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Card>\n      <CardMedia image={post.selectedFile} title={post.title} />\n      <div>\n        <Typography variant=\"h6\">{post.creator}</Typography>\n        <Typography variant=\"body2\">\n          {moment(post.createdAt).fromNow()}\n        </Typography>\n      </div>\n      <div>\n        <Button\n          style={{ color: \"white\" }}\n          size=\"small\"\n          onClick={() => setCurrentId(post._id)}\n        >\n          <MoreHorizIcon fontSize=\"default\" />\n        </Button>\n      </div>\n      <div>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"h2\">\n          {post.tags.map((tag) => `#${tag} `)}\n        </Typography>\n      </div>\n      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n        {post.title}\n      </Typography>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\n          {post.message}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          //   onClick={() => dispatch(likePost(post._id))}\n        >\n          <ThumbUpAltIcon fontSize=\"small\" /> Like {post.likeCount}{\" \"}\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n            onClick={() => dispatch(deletePost(post._id))}\n        >\n          <DeleteIcon fontSize=\"small\" /> Delete\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Post;\n","/Users/sylvia/Documents/Blog/client/src/components/Form/form.js",["61"],"import React, { useState, useEffect } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport importGoogleFonts from \"import-google-fonts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FileBase from \"react-file-base64\";\nimport { createPost, updatePost } from \"../../actions/post\";\n\nconst MainDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ButtonDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst GoogleFonts = importGoogleFonts(\n  createGlobalStyle,\n  null,\n  [\"Abril Fatface\"],\n  [\"Aclonica\"]\n);\n\nconst Header = styled.h1`\n  font-family: \"Abril Fatface\";\n  font-size: 90px;\n  font-weight: 700;\n  line-height: 94px;\n  color: white;\n\n`;\n\nconst Forum = styled.form`\n  background-color: #08080a45;\n  height: 500px;\n  width: 300px;\n  padding: 100px;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  font-family: monospace;\n  justify-content: space-between;\n  font-size: large;\n`;\n\nconst H3 = styled.h1`\n  color: coral;\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #fc00ff 0%,\n    #00dbde 51%,\n    #fc00ff 100%\n  );\n  \n  margin: 50px 0px;\n  font-family: \"Aclonica\";\n  font-size: 20px;\n  margin: 10px;\n  padding: 10px 45px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  /* box-shadow: 0 0 2px #fc00ff; */\n  border-radius: 10px;\n  width: 50%;\n  display: block;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n\nconst Button2 = styled.button`\n  display: inline-block;\n   padding: 0.35em 1.2em;\n   border: 0.1em solid #ffffff;\n   margin: 0 0.3em 0.3em 0;\n   border-radius: 0.12em;\n   box-sizing: border-box;\n   text-decoration: none;\n   font-family: \"Roboto\", sans-serif;\n   font-weight: 300;\n   color: #ffffff;\n   text-align: center;\n   background-color: #ffffff00;\n   height: 32px;\n\n  &:hover {\n     color: #000000;\n     background-color: #ffffff;\n  }\n`;\n\nfunction Form({ currentId, setCurrentId }) {\n  const [postData, setPostData] = useState({\n    creator: \"\",\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n  const dispatch = useDispatch;\n  const post = useSelector((state) =>\n    currentId ? state.posts.find((p) => p._id === currentId) : null\n  );\n  const clear = () => {\n    setPostData({\n      creator: \"\",\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n    }\n    clear();\n  };\n \n  return (\n    <MainDiv>\n      <Header> Create a Post! </Header>\n      <Forum autoComplete=\"off\" onSubmit={handleSubmit}>\n        <H3> {currentId ? \"Editing\" : \"Creating\"}</H3>\n        <label for=\"Creator\">Author</label>\n        <input\n          type=\"text\"\n          id=\"author\"\n          name=\"author\"\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        />\n        <label for=\"Title\">Title:</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <label for=\"Text\">Text:</label>\n        <input\n          type=\"text\"\n          id=\"text\"\n          name=\"message\"\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <label for=\"Text\">Hastags:</label>\n        <input\n          type=\"text\"\n          id=\"tags\"\n          name=\"tags\"\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value })}\n        />\n        <div>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <ButtonDiv>\n          <Button type=\"submit\">Submit</Button>\n        </ButtonDiv>\n        <ButtonDiv>\n          <Button2 onClick={clear}>clear</Button2>\n        </ButtonDiv>\n      </Forum>\n    </MainDiv>\n  );\n}\nexport default Form;\n\n//currentID required to link with form to edit it from the post\n","/Users/sylvia/Documents/Blog/client/src/actions/post.js",["62","63","64"],"import * as api from \"../API/index\";\n\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const { data } = await api.fetchPosts();\n    console.log(data);\n\n    dispatch({ type: \"FETCH_ALL\", payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n//this mean we are importing from actions- as api and be able to use the fetchPosts from the axios file//\n//Action Creators, function returning actions, payload= stored data//\n// when working with async fx, we can use R.thunk, allowing us to specify an additional arrow fx which we will use async\n//now we have access to dispatch w/async//\n//catching all the data from API, data reps the post\n\nexport const createPost = (post) => async (dispatch) => {\n  try {\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: \"CREATE\", payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: \"UPDATE\", payload: data });\n  } catch (error) {\n    console.log(\"error\");\n  }\n};\n\n// export const deletePost = async (req, res) => {\n//   const { id } = req.params;\n\n//   if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);\n\n//   await PostMessage.findByIdAndRemove(id);\n\n//   res.json({ message: \"Post deleted successfully.\" });\n// }\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: \"DELETE, payload: data\" });\n  } catch (error) {\n    console.log(error)\n  }\n};\n\nexport const likePost = async (req, res) => {\n  const { id } = req.params;\n\n  if (!mongoose.Types.ObjectId.isValid(id))\n    return res.status(404).send(`No post with id: ${id}`);\n\n  const post = await PostMessage.findById(id);\n\n  const updatedPost = await PostMessage.findByIdAndUpdate(\n    id,\n    { likeCount: post.likeCount + 1 },\n    { new: true }\n  );\n\n  res.json(updatedPost);\n};\n","/Users/sylvia/Documents/Blog/client/src/reducers/index.js",[],"/Users/sylvia/Documents/Blog/client/src/reducers/posts.js",["65","66"],"export default (posts = [], action) => {\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload;\n    // case LIKE:\n    //   return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case \"CREATE\":\n      return [...posts, action.payload];\n    case \"UPDATE\":\n      return posts.map((post) => (post._id === action.payload._id ? action.payload._id : post));\n    case DELETE:\n      return posts.filter((post) => post._id !== action.payload);\n    default:\n      return posts;\n  }\n};\n//action.payload= updated posts\n","/Users/sylvia/Documents/Blog/client/src/API/index.js",[],"/Users/sylvia/Documents/Blog/client/src/api/index.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":2,"message":"74","line":74,"column":37,"nodeType":"75","messageId":"76","endLine":74,"endColumn":47},{"ruleId":"77","severity":1,"message":"78","line":21,"column":7,"nodeType":"75","messageId":"79","endLine":21,"endColumn":18},{"ruleId":"73","severity":2,"message":"80","line":63,"column":8,"nodeType":"75","messageId":"76","endLine":63,"endColumn":16},{"ruleId":"73","severity":2,"message":"81","line":66,"column":22,"nodeType":"75","messageId":"76","endLine":66,"endColumn":33},{"ruleId":"73","severity":2,"message":"81","line":68,"column":29,"nodeType":"75","messageId":"76","endLine":68,"endColumn":40},{"ruleId":"82","severity":1,"message":"83","line":1,"column":1,"nodeType":"84","endLine":16,"endColumn":3},{"ruleId":"73","severity":2,"message":"85","line":11,"column":10,"nodeType":"75","messageId":"76","endLine":11,"endColumn":16},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],["86"],["87"],"no-undef","'deletePost' is not defined.","Identifier","undef","no-unused-vars","'GoogleFonts' is assigned a value but never used.","unusedVar","'mongoose' is not defined.","'PostMessage' is not defined.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'DELETE' is not defined.","no-global-assign","no-unsafe-negation"]