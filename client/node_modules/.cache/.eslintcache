[{"/Users/sylvia/Documents/Blog/client/src/index.js":"1","/Users/sylvia/Documents/Blog/client/src/App.js":"2","/Users/sylvia/Documents/Blog/client/src/components/Hero/hero.js":"3","/Users/sylvia/Documents/Blog/client/src/components/ScrollToTop.js":"4","/Users/sylvia/Documents/Blog/client/src/components/Posts/posts.js":"5","/Users/sylvia/Documents/Blog/client/src/components/Post/post.js":"6","/Users/sylvia/Documents/Blog/client/src/components/Form/form.js":"7","/Users/sylvia/Documents/Blog/client/src/actions/post.js":"8","/Users/sylvia/Documents/Blog/client/src/reducers/index.js":"9","/Users/sylvia/Documents/Blog/client/src/reducers/posts.js":"10","/Users/sylvia/Documents/Blog/client/src/API/index.js":"11","/Users/sylvia/Documents/Blog/client/src/api/index.js":"12"},{"size":508,"mtime":1642965158301,"results":"13","hashOfConfig":"14"},{"size":978,"mtime":1643263708564,"results":"15","hashOfConfig":"14"},{"size":1877,"mtime":1643093485891,"results":"16","hashOfConfig":"14"},{"size":245,"mtime":1642735698598,"results":"17","hashOfConfig":"14"},{"size":908,"mtime":1643265569510,"results":"18","hashOfConfig":"14"},{"size":2293,"mtime":1643331127595,"results":"19","hashOfConfig":"14"},{"size":4640,"mtime":1643266291249,"results":"20","hashOfConfig":"14"},{"size":1153,"mtime":1643265191236,"results":"21","hashOfConfig":"14"},{"size":114,"mtime":1643265537939,"results":"22","hashOfConfig":"14"},{"size":559,"mtime":1643263597872,"results":"23","hashOfConfig":"14"},{"size":407,"mtime":1643229894758,"results":"24","hashOfConfig":"14"},{"size":416,"mtime":1643073996098,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4z0ace",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sylvia/Documents/Blog/client/src/index.js",[],["55","56"],"/Users/sylvia/Documents/Blog/client/src/App.js",[],"/Users/sylvia/Documents/Blog/client/src/components/Hero/hero.js",[],"/Users/sylvia/Documents/Blog/client/src/components/ScrollToTop.js",[],["57","58"],"/Users/sylvia/Documents/Blog/client/src/components/Posts/posts.js",[],["59","60"],"/Users/sylvia/Documents/Blog/client/src/components/Post/post.js",[],"/Users/sylvia/Documents/Blog/client/src/components/Form/form.js",["61"],"import React, { useState, useEffect } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport importGoogleFonts from \"import-google-fonts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FileBase from \"react-file-base64\";\nimport { createPost, updatePost } from \"../../actions/post\";\n\nconst MainDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ButtonDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst GoogleFonts = importGoogleFonts(\n  createGlobalStyle,\n  null,\n  [\"Abril Fatface\"],\n  [\"Aclonica\"]\n);\n\nconst Header = styled.h1`\n  font-family: \"Abril Fatface\";\n  font-size: 90px;\n  font-weight: 700;\n  line-height: 94px;\n  color: white;\n\n`;\n\nconst Forum = styled.form`\n  background-color: #08080a45;\n  height: 500px;\n  width: 300px;\n  padding: 100px;\n  border-radius: 25px;\n  display: flex;\n  flex-direction: column;\n  color: white;\n  font-family: monospace;\n  justify-content: space-between;\n  font-size: large;\n`;\n\nconst H3 = styled.h1`\n  color: coral;\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #fc00ff 0%,\n    #00dbde 51%,\n    #fc00ff 100%\n  );\n  \n  margin: 50px 0px;\n  font-family: \"Aclonica\";\n  font-size: 20px;\n  margin: 10px;\n  padding: 10px 45px;\n  text-align: center;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  /* box-shadow: 0 0 2px #fc00ff; */\n  border-radius: 10px;\n  width: 50%;\n  display: block;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n\nconst Button2 = styled.button`\n  display: inline-block;\n   padding: 0.35em 1.2em;\n   border: 0.1em solid #ffffff;\n   margin: 0 0.3em 0.3em 0;\n   border-radius: 0.12em;\n   box-sizing: border-box;\n   text-decoration: none;\n   font-family: \"Roboto\", sans-serif;\n   font-weight: 300;\n   color: #ffffff;\n   text-align: center;\n   background-color: #ffffff00;\n   height: 32px;\n\n  &:hover {\n     color: #000000;\n     background-color: #ffffff;\n  }\n`;\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ creator: '', title: '', message: '', tags: '', selectedFile: '' });\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ creator: '', title: '', message: '', tags: '', selectedFile: '' });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost(postData));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, postData));\n      clear();\n    }\n  };\n\n  return (\n    <MainDiv>\n      <Header> Create a Post! </Header>\n      <Forum autoComplete=\"off\" onSubmit={handleSubmit}>\n        <H3> {currentId ? \"Editing\" : \"Creating\"}</H3>\n        <label for=\"Creator\">Author</label>\n        <input\n          type=\"text\"\n          id=\"author\"\n          name=\"author\"\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        />\n        <label for=\"Title\">Title:</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <label for=\"Text\">Text:</label>\n        <input\n          type=\"text\"\n          id=\"text\"\n          name=\"message\"\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <label for=\"Text\">Hastags:</label>\n        <input\n          type=\"text\"\n          id=\"tags\"\n          name=\"tags\"\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value })}\n        />\n        <div>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <ButtonDiv>\n          <Button type=\"submit\">Submit</Button>\n        </ButtonDiv>\n        <ButtonDiv>\n          <Button2 onClick={clear}>clear</Button2>\n        </ButtonDiv>\n      </Forum>\n    </MainDiv>\n  );\n}\nexport default Form;\n\n//currentID required to link with form to edit it from the post\n","/Users/sylvia/Documents/Blog/client/src/actions/post.js",[],"/Users/sylvia/Documents/Blog/client/src/reducers/index.js",[],"/Users/sylvia/Documents/Blog/client/src/reducers/posts.js",["62"],"export default(posts = [], action) => {\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload;\n    case \"LIKE\":\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case \"CREATE\":\n      return [...posts, action.payload];\n    case \"UPDATE\":\n      return posts.map((post) => (post._id === action.payload._id ? action.payload._id : post));\n    case \"DELETE\":\n      return posts.filter((post) => post._id !== action.payload);\n    default:\n      return posts;\n  }\n};\n//action.payload= updated posts\n","/Users/sylvia/Documents/Blog/client/src/API/index.js",[],"/Users/sylvia/Documents/Blog/client/src/api/index.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"63","replacedBy":"69"},{"ruleId":"65","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":21,"column":7,"nodeType":"73","messageId":"74","endLine":21,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":1,"column":1,"nodeType":"77","endLine":16,"endColumn":3},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],["78"],["79"],"no-unused-vars","'GoogleFonts' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]